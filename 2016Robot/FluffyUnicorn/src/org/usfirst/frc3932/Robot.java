// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3932;


import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.AxisCamera;
import edu.wpi.first.wpilibj.vision.USBCamera;

import org.usfirst.frc3932.commands.*;
import org.usfirst.frc3932.subsystems.*;

import com.kauailabs.navx.frc.AHRS;
import com.ni.vision.NIVision;
import com.ni.vision.NIVision.Image;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.I2C;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    private static final double MIN_VOLTAGE = 10.6;

	Command autonomousCommand;

	private boolean counter;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveSystem driveSystem;
    public static Platform platform;
    public static Camera camera;
    public static Cannon cannon;
    public static OnBoardCompressor onBoardCompressor;
    public static ShooterWheels shooterWheels;
    public static PowerDistributionBoard powerDistributionBoard;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static AHRS ahrs;
    
//
    public static CameraConfig[] cameras = {
//    		new CameraConfig("cameraA.local"),
//    		new CameraConfig("cameraB.local"),
//    		new CameraConfig("cameraC.local")
    };
    public static int cameraIndex = 0; 
    
//    public static final int NUMBER_OF_CAMERAS = cameras.length;
    
    
    public static LIDAR rangefinder;
    private static SendableChooser obstacleChooser = new SendableChooser();
    private static SendableChooser positionChooser = new SendableChooser();
    

    public Robot(){
        obstacleChooser.addDefault("Auto_Moat:", Commands.AUTO_MOAT);
        obstacleChooser.addObject("Auto_Low Bar:", Commands.AUTO_LOW_BAR);
        obstacleChooser.addObject("Auto_Rampart:", Commands.AUTO_RAMPART);
        obstacleChooser.addObject("AutoRoughTerrain:", Commands.AUTO_ROUGHTERRAIN);
        obstacleChooser.addObject("Auto RockWall:", Commands.AUTO_ROCKWALL);
        obstacleChooser.addObject("Do Nothing:", Commands.DO_NOTHING);
        SmartDashboard.putData("Auto-Obstacle:", obstacleChooser);
        
        positionChooser.addDefault("Position1", Commands.DRIVE_FROM_POSITION_1);
        positionChooser.addObject("Position 2", Commands.DRIVE_FROM_POSITION_2);
        positionChooser.addObject("Position 3", Commands.DRIVE_FROM_POSITION_3);
        positionChooser.addObject("Position 4", Commands.DRIVE_FROM_POSITION_4);
        positionChooser.addObject("Position 5", Commands.DRIVE_FROM_POSITION_5);
        SmartDashboard.putData("Auto-Position", positionChooser);
    }
   

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSystem = new DriveSystem();
        platform = new Platform();
        camera = new Camera();
        cannon = new Cannon();
        onBoardCompressor = new OnBoardCompressor();
        shooterWheels = new ShooterWheels();
        powerDistributionBoard = new PowerDistributionBoard();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
 //       oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	
		ahrs = new AHRS(SPI.Port.kMXP);
		rangefinder = new LIDAR(I2C.Port.kMXP);
		rangefinder.start();
		camera.lightOn();
		
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

//		

//		NetworkTable.setClientMode();
//		NetworkTable.setIPAddress("127.0.0.1");

    }
    

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	 if (autonomousCommand != null) autonomousCommand.cancel();
         
    	Scheduler.getInstance().run();

    }

    public void disabledPeriodic() {
    	//Scheduler.getInstance().run();
    	//Scheduler.getInstance().disable();
    	Scheduler.getInstance().removeAll();
    	Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
    	Commands obstacle = (Commands) obstacleChooser.getSelected();
    	Command obstacleCommand = CommandFactory.getCommand(obstacle);
    	
    	Commands position = (Commands) positionChooser.getSelected();
    	Command positionCommand = CommandFactory.getCommand(position);
    	
    	if (obstacle == Commands.DO_NOTHING){
    		autonomousCommand = obstacleCommand;
    	} else {
    		autonomousCommand = new FullAutonomous(obstacleCommand, positionCommand);
    	}
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        Robot.platform.tiltDown();
        Robot.camera.TiltUp();
        
        
    }

    /**
     * This function is called periodically during operator control
     */
    
	
	private void runCamera(){
//		counter = !counter;
//		if (counter) {
//			currentCamera().sendImage();
//		}
	}
	
//	private void checkCompressor() {
//		if (powerDistributionBoard.getVoltage() < MIN_VOLTAGE) {
//			onBoardCompressor.stop();
//		}
//		else {
//			onBoardCompressor.automatic();
//		}
//	}
	
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        
        
//        checkCompressor();
//        runCamera();
        writeLIDAR();
        SmartDashboard.putNumber("Yaw LIDAR Teleop", ahrs.getYaw());
        

    }

    private void writeLIDAR() {
		SmartDashboard.putNumber("LIDAR Distance (cm)", rangefinder.getDistance());
		SmartDashboard.putNumber("Write Yaw LIDAR", ahrs.getYaw());	
		//SmartDashboard.putNumber("AHRS X:", ahrs.getDisplacementX());
		//SmartDashboard.putNumber("AHRS Y:", ahrs.getDisplacementY());
	
	}

	/**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    
    public static void switchCameraTo(int camera) {
//    	cameraIndex = camera;
    }
    
    public static void switchCameras() {
//    	int numberOfSwitches = 1;
//    	switchCameraToNext();
//    	
//    	while (!currentCamera().exists() && numberOfSwitches < NUMBER_OF_CAMERAS){
//    		switchCameraToNext();
//    		numberOfSwitches++;
//    	}
    }
    
    private static void switchCameraToNext() {
//    	cameraIndex++;
//    	if (cameraIndex >= NUMBER_OF_CAMERAS){
//    		cameraIndex = 0;
//    	}
    }
    
    private static CameraConfig currentCamera() {
    	return cameras[cameraIndex];
    }

}
