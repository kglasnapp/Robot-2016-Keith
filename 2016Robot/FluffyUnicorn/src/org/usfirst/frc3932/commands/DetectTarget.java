// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3932.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3932.Robot;

/**
 *
 */
public class DetectTarget extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
	NetworkTable table = null;
	
	private static final double H_RES = 480;
	private static final double FIELD_OF_VIEW = 67;
	
	double[] blob = null;
	public double angle = 0;
	public boolean angleReady = false;


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DetectTarget() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	angle = 0;
    	angleReady = false;
    	System.out.println("Detect Target Initialized");
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	System.out.println("After execute");
    	table = NetworkTable.getTable("SmartDashboard");
    	double[] defaultValue = new double[0];
    	double[] x = table.getNumberArray("XRoboRealmBlob", defaultValue);
    	double distance = table.getNumber("RoboRealmDistance", 0.0);
    	
    	System.out.println("bloblength" + x.length);
    	
    	if (x.length > 0){
    		System.out.println("Blobblblblblbl"+ x[0]);
    		angle = (x[0] - H_RES/2) * (FIELD_OF_VIEW/H_RES);
    		angleReady = true;
    		SmartDashboard.putNumber("angle", angle);
    	SmartDashboard.putNumber("XRoboRealmBlob", x[0]);
    		
    	}
    	
    	
    	
    }
    

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return angleReady;
    }

    // Called once after isFinished returns true
    protected void end() {
    	SmartDashboard.putNumber("x", angle);
    	System.out.println("Target found" + angle);
    	Robot.camera.turnByAngle = angle;
    	SmartDashboard.putNumber("CameraAngle", angle);
//    	Scheduler.getInstance().add(new TurnTo(Robot.ahrs.getYaw() + angle, 5));
    	
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
