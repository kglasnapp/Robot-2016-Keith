// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3932.commands;

import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3932.Robot;
import org.usfirst.frc3932.pid.AhrsYawPIDSource;
import org.usfirst.frc3932.pid.DriveSystemRotatePIDOutput;

/**
 *
 */
public class TurnTo extends Command{

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_degrees;
    
    private PIDController controller;

	private boolean notUsingI = true;
    
    //oscillation period .44
    private static final double P = .045;
    private static final double I = .007;
    private static final double D = 0;
    //just added
    private static final double F = 1.3;

    // Acceptable error
	private static final double EPSILON = 2;

	private static final double RELATIVELY_CLOSE = 10;
	
	private static final double MAX_OUTPUT = 0.3;
	
	//private double timeout = 0;
	private double m_timeout = 0;
	
	private static final int MAX_ERROR = 5;
	private int m_errorcounter = 0;
	
	
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TurnTo(double degrees, double timeout) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_degrees = degrees;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
       //Add and F term at point 2 Keith fault 
        controller = new PIDController(P, I, D, F, new AhrsYawPIDSource(), new DriveSystemRotatePIDOutput());
        controller.setInputRange(-180, 180);
        controller.setContinuous();
        controller.setAbsoluteTolerance(1.4);
        //controller.setToleranceBuffer(20);  // Keith -- seems that if set to 20 it take too long for the pid to converge

      // controller.getAvgError();
        controller.setOutputRange(-MAX_OUTPUT, MAX_OUTPUT);
        m_timeout = timeout;
       // this.timeout = timeout;

       
    }
    
    public TurnTo(double degrees){
    	this(degrees, 5);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	
    	m_errorcounter = 0;
    	
    	controller.disable();
    	System.out.println("Turnto initialized: Timeout= " + m_timeout + " degrees = " + m_degrees +
    			 " p:" + P + " i:" + I + " d:" + D + " f:" + F);
    	Robot.driveSystem.resetEncoders();
    	controller.enable();
    	controller.setSetpoint(m_degrees);
    	//controller.enable();
    	//setTimeout(timeout);
    	this.setTimeout(m_timeout);
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
//    	if (Math.abs(controller.getError()) < RELATIVELY_CLOSE && notUsingI){
//    		controller.setPID(P, I, D);
//    		controller.setSetpoint(m_degrees);
//    		controller.enable();
//    		notUsingI = false;
//    	}
//    	SmartDashboard.putNumber("Accumulation", controller.);
    	SmartDashboard.putNumber("Error", controller.getError());
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {

    	if (Math.abs(controller.getError())<1.5) 
    		m_errorcounter++;
    	else
    		m_errorcounter = 0;
    	
    	System.out.println("onTarget:" + controller.onTarget() +
    			" Timeout:" + isTimedOut() + " YAW:" + 
    			Robot.ahrs.getYaw()+ " Error:" + controller.getError()
    			+ " GetAverageError:" + controller.getAvgError()
    			+ " ErrorCounter:" + m_errorcounter);
    	//return (controller.onTarget()) || (m_errorcounter >= MAX_ERROR) || isTimedOut();
    	
    	//return (controller.onTarget()) || (m_errorcounter >= MAX_ERROR) || isTimedOut();
    return controller.onTarget() || isTimedOut();
    	
        
    }

    // Called once after isFinished returns true
    protected void end() {
    	//Robot.driveSystem.resetEncoders();
    	System.out.println("Turnto is Finished timeOut:"  + m_timeout + " degrees = " + m_degrees + " Yaw:" + Robot.ahrs.getYaw());
    	controller.disable();
    	//controller.reset();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
    
    public double getError() {
    	return controller.getError();
    }

}
